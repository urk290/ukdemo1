# This workflow will build and push a Java application to an Azure Web App when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/en-us/azure/app-service/quickstart-java?tabs=javase&pivots=platform-linux
#
# To configure this workflow:
#
# 1. Download the Publish Profile for your Azure Web App. You can download this file from the Overview page of your Web App in the Azure Portal.
#    For more information: https://docs.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=applevel#generate-deployment-credentials
#
# 2. Create a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE, paste the publish profile contents as the value of the secret.
#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# 3. Change the value for the AZURE_WEBAPP_NAME. Optionally, change the JAVA_VERSION environment variable below.
#
# For more information on GitHub Actions for Azure: https://github.com/Azure/Actions
# For more information on the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples

name: Build and deploy JAR app to Azure Web App

env:
  AZURE_WEBAPP_NAME: ukdemo1    # set this to the name of your Azure Web App
  JAVA_VERSION: '11'                  # set this to the Java version to use

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up Java version
        uses: actions/setup-java@v2.3.1
        with:
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'maven'

      - name: Build with Maven
        run: mvn clean install

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v2
        with:
          name: java-app
          path: '${{ github.workspace }}/target/*.jar'

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Development'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    
    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v2
        with:
          name: java-app

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: '*.jar'
      - name: Setup Java JDK
        uses: actions/setup-java@v2.5.0
        with:
          # The Java version to set up. Takes a whole or semver Java version. See examples of supported syntax in README file
          java-version: 11
          # Java distribution. See the list of supported distributions in README file
          distribution: jdk
          # The package type (jdk, jre, jdk+fx, jre+fx)
          java-package: # optional, default is jdk
          # The architecture of the package
          architecture: # optional, default is x64
          # Path to where the compressed JDK is located
          jdkFile: # optional
          # Set this option if you want the action to check for the latest available version that satisfies the version spec
          check-latest: # optional
          # ID of the distributionManagement repository in the pom.xml file. Default is `github`
          server-id: # optional, default is github
          # Environment variable name for the username for authentication to the Apache Maven repository. Default is $GITHUB_ACTOR
          server-username: # optional, default is GITHUB_ACTOR
          # Environment variable name for password or token for authentication to the Apache Maven repository. Default is $GITHUB_TOKEN
          server-password: # optional, default is GITHUB_TOKEN
          # Path to where the settings.xml file will be written. Default is ~/.m2.
          settings-path: # optional
          # Overwrite the settings.xml file if it exists. Default is "true".
          overwrite-settings: # optional, default is true
          # GPG private key to import. Default is empty string.
          gpg-private-key: # optional
          # Environment variable name for the GPG private key passphrase. Default is $GPG_PASSPHRASE.
          gpg-passphrase: # optional
          # Name of the build platform to cache dependencies. It can be "maven" or "gradle".
          cache: # optional
          # Workaround to pass job status to post job step. This variable is not intended for manual setting
          job-status: # optional, default is ${{ job.status }}
